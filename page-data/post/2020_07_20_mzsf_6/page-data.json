{"componentChunkName":"component---src-templates-post-js","path":"/post/2020_07_20_mzsf_6/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby OMG Blog","post":{"pageviews":true}}},"markdownRemark":{"id":"f9c5e649-2c5e-575e-9e25-1469ff4db4a7","excerpt":"本周是双指针遍历篇的第三种（也是最后一种解题方法），快慢指针！ 什么是快慢指针呢？能解决什么样得到问题呢？ 假设在一个环形跑道上，小明和小红比赛跑步，假定小红的速度始终比小明快，那么小红早晚会超过小明一圈并在此相遇。  又或者，小红的速度是小明的…","html":"<p>本周是双指针遍历篇的第三种（也是最后一种解题方法），快慢指针！</p>\n<p>什么是快慢指针呢？能解决什么样得到问题呢？</p>\n<p>假设在一个环形跑道上，小明和小红比赛跑步，假定小红的速度始终比小明快，那么小红早晚会超过小明一圈并在此相遇。</p>\n<p><img src=\"https://cdn.byeguo.cn/gzh/blog/2020_07_20_mzsf_6/1.png\"></p>\n<p>又或者，小红的速度是小明的2倍，他俩在直线跑道上跑，那当小红跑道重点时，小明正好在跑道中间</p>\n<p>快慢指针，顾名思义，定义两个指针一快一慢，如果链表有环，则快慢两指针早晚会相遇，这样就能判断出链表中有环存在。如果链表无环，则快指针遍历完链表时，慢指针正好在链表的中间。</p>\n<p><em>所以，综上可知，快慢指针在处理链表、数组的追击问题时可以发挥出它的威力！</em></p>\n<h2 id=\"【每周算法】双指针遍历篇：环形链表\">【每周算法】(双指针遍历篇)：环形链表</h2>\n<blockquote>\n<p>leetcode 141 题：环形链表\n<a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">https://leetcode-cn.com/problems/linked-list-cycle/</a></p>\n</blockquote>\n<p>给定一个链表，判断链表中是否有环。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">输入： <span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span> <span class=\"token operator\">=></span> <span class=\"token number\">4</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span>\n输出： <span class=\"token boolean\">true</span>\n\n<span class=\"token parameter\">输入：<span class=\"token number\">1</span></span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span> <span class=\"token operator\">=></span> <span class=\"token number\">4</span>\n输出：<span class=\"token boolean\">false</span>\n\n<span class=\"token comment\">/**\n * @param {ListNode} head\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hasCycle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"解答过程\">解答过程</h2>\n<h3 id=\"节点标记法\">节点标记法</h3>\n<p>最先想到的基础方法，不需要任何前置知识：</p>\n<p>我们只需要遍历这个链表，在遍历过的时候给节点打一个tag，这样，如果遍历到循环结束，那该链表自然不是环形链表。</p>\n<p>反之，如果我们遍历的时候遇到了tag，则说明我们之前也遇到过它，所以我们已经进入了环中！故<code class=\"language-text\">return true</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hasCycle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 链表长度小于2时直接return</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        head<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>执行用时：96 ms, 在所有 JavaScript 提交中击败了18.67%的用户</li>\n<li>内存消耗：38.3 MB, 在所有 JavaScript 提交中击败了33.33%的用户</li>\n</ul>\n<h3 id=\"hashmap法\">hashMap法</h3>\n<p>百用不厌的hash法（所以说Map真是个好东西💪）。在遍历链表时存储遍历过的节点，如果Map中该节点存在，则说明链表中有环</p>\n<p>这种解法和节点标记法异曲同工。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hasCycle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>执行用时：80 ms, 在所有 JavaScript 提交中击败了71.12%的用户</li>\n<li>内存消耗：38.6 MB, 在所有 JavaScript 提交中击败了8.33%的用户</li>\n</ul>\n<h3 id=\"快慢指针\">快慢指针</h3>\n<p>重点来了！别说话，看图：</p>\n<p><img src=\"https://cdn.byeguo.cn/gzh/blog/2020_07_20_mzsf_6/2.gif\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hasCycle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">let</span> slow <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">let</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fast <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>执行用时：76 ms, 在所有 JavaScript 提交中击败了85.77%的用户</li>\n<li>内存消耗：38.3 MB, 在所有 JavaScript 提交中击败了33.33%的用户</li>\n</ul>\n<p>首先定义两个变量（指针）开始循环，快指针的速度是慢指针的两倍，所以当他们相遇时，则链表中存在环，或者快指针走到终点，说明链表无环。</p>\n<h2 id=\"最后\">最后</h2>\n<p>这是双指针遍历篇的最后一篇文章了，至此这种解题方法的三种常见题型我们也都做过啦。后面我会对前面的文章中的对撞指针、滑块指针、快慢指针的题型做一篇总结，再复习一次，同时综合的再讲解一遍。</p>\n<p>另外，自己在公众号的创作也有一个月了，最近在思考每周算法的写作模式是否有些枯燥，应该会做一次创作模式的有趣改变，但是依旧会保持每周至少一篇的算法内容输出，和大家共同学习前端的方方面面、拭目以待吧！</p>","headings":[{"value":"【每周算法】(双指针遍历篇)：环形链表","depth":2},{"value":"解答过程","depth":2},{"value":"节点标记法","depth":3},{"value":"hashMap法","depth":3},{"value":"快慢指针","depth":3},{"value":"最后","depth":2}],"frontmatter":{"title":"【每周算法】(双指针遍历篇)：环形链表","date":"July 20, 2020","description":"来自 一个歪卜 公众号文章，欢迎大家在文章下方评论区评论，也可以写出下周题目的解题思路哦～","tags":["javascript","每周算法"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2020_07_20_mzsf_6/","previous":{"fields":{"slug":"/post/2020_07_20_lbjc/"},"frontmatter":{"title":"漫解链表"}},"next":{"fields":{"slug":"/post/2020_07_27_mzsf_7/"},"frontmatter":{"title":"【每周算法】双指针算法各类题型总结"}}}}}