{"componentChunkName":"component---src-templates-post-js","path":"/post/2020_07_06_mzsf_4/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby OMG Blog","post":{"pageviews":true}}},"markdownRemark":{"id":"052566c4-0a4c-50b2-b12f-9c76454937f5","excerpt":"本周是 双指针遍历篇 的第三题，注意：这道题目和我们之前的做法不大一样，之前的题目是逆向的双指针解法，而这道题目：是同向的双指针解法，又名滑块窗口法。那么滑块法和普通的双指针遍历有什么区别呢？大家请看图：  这里先来解释一下上面的图。 逆向双指针：由图可知，逆向双指针是在for循环中，通过 L和R…","html":"<p><img src=\"https://static01.imgkr.com/temp/19d08d7dc7e54c848b4116752afe74d4.png\"></p>\n<p>本周是 双指针遍历篇 的第三题，注意：这道题目和我们之前的做法不大一样，之前的题目是逆向的双指针解法，而这道题目：是同向的双指针解法，又名<strong>滑块窗口法</strong>。那么滑块法和普通的双指针遍历有什么区别呢？大家请看图：</p>\n<p><img src=\"https://static01.imgkr.com/temp/093c0df0175249b3ac83ccd21cef64ba.png\"></p>\n<p>这里先来解释一下上面的图。</p>\n<ul>\n<li>逆向双指针：由图可知，逆向双指针是在for循环中，通过 L和R<strong>两个指针</strong>反方向遍历数组（while循环），最终L和R相遇进行第二次for循环，以此类推来操作数组的。</li>\n<li>滑块窗口：而滑块窗口遍历，是for循环中，通过<strong>一个指针</strong>、和for循环中的i，以相同的方向遍历数组来完成数组的操作。同时，row和i就好像是一个长度可变滑块一样，操作滑块中的数据，故名为滑块遍历法</li>\n</ul>\n<p>好了，前置知识解释完毕，如果还不是很理解没有关系，我们做完这题后，相信一定可以对该方法有所了解！</p>\n<h2 id=\"【每周算法】双指针遍历篇：长度最小的子数组\">【每周算法】(双指针遍历篇)：长度最小的子数组</h2>\n<p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 举个🌰</span>\n输入<span class=\"token punctuation\">:</span> s <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n解释<span class=\"token punctuation\">:</span> 子数组 <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> 是该条件下的长度最小的连续子数组。\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minSubArrayLen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"解答过程\">解答过程</h2>\n<h3 id=\"维护数组-的滑块遍历\">维护数组 的滑块遍历</h3>\n<p>这是我首先能想到的方法，因为题目是要找的是长度最小的子数组，所以索性就来构造这么一个数组arr，然后用 min 来存储数组的长度，并对每次满足条件的数组长度进行比对 <em>(满足数组之和sum ≥ s的while循环)</em>，最终得到最小的min。</p>\n<p>因为题目要求当不符合条件时返回0，但是如果直接把min设置为0的话，进行比对会有问题。所以将其初始值设为nums.length + 1，这样如果数组满足条件，则min一定会小于nums.length+1，故最后return结果时通过min是否等于nums.length+1进行判断即可。</p>\n<p>整个思路流程如图所示：</p>\n<p><img src=\"https://static01.imgkr.com/temp/5453d42338ce444b917e997820fc06db.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minSubArrayLen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">-=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span>\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> min <span class=\"token operator\">==</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> min\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>执行用时：80 ms, 在所有 JavaScript 提交中击败了38.12%的用户</li>\n<li>内存消耗：36.5 MB, 在所有 JavaScript 提交中击败了25.00%的用户</li>\n</ul>\n<p>这样我们就成功的解出了这道题目，但是执行时间和内存消耗看起来都不尽人意…所以，我们来想办法优化一下这个算法：</p>\n<p>既然我们可以通过保存数组的形式来计算出长度最小的数组，而且arr数组是nums数组连续的一段。那么，能不能通过保存数组下标的形式来计算呢？用一个变量row来保存数组的下标，毕竟操作数组的性能肯定比不上直接操作变量！</p>\n<h3 id=\"维护下标-的滑块遍历\">维护下标 的滑块遍历</h3>\n<p>答案当然是可以的，我们把上面的arr数组改成row变量，用变量row来存储上面arr的初始位置、i为arr的结束位置，这样就能省去对数组的push和shift操作了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minSubArrayLen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// arr.push(nums[i]) 在这里等同于i++</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">-=</span> nums<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span>\n      min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>row<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// arr.length等同于i-row+1</span>\n      row<span class=\"token operator\">++</span> <span class=\"token comment\">// arr.shift() 等同于 row++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> min <span class=\"token operator\">==</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> min\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>执行用时：60 ms, 在所有 JavaScript 提交中击败了98.25%的用户</li>\n<li>内存消耗：35.9 MB, 在所有 JavaScript 提交中击败了100.00%的用户</li>\n</ul>\n<p>简单解释下代码：</p>\n<p>解法一的 <strong>arr&#x3C;:array></strong> 在这里替换成了 <strong>row&#x3C;:int></strong>，因为<strong>arr</strong>本身结束位置就和<strong>nums</strong>遍历的进度保持一致，所以 <strong>i</strong> 就可以当作解法一中arr的结束下标，<strong>row</strong>当作<strong>arr</strong>的起始下标，所以解法一中的<strong>push</strong>等同于<strong>i++</strong>，可以省去，<strong>shift</strong>方法等同于<strong>row++</strong>。</p>\n<h2 id=\"下周题目\">下周题目</h2>\n<p>下周我们继续做一道滑块遍历的题目，来巩固一下本节所学的知识。希望大家也能用今天学到的方法来解答出该题：</p>\n<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 举个🌰</span>\n输入<span class=\"token punctuation\">:</span> <span class=\"token string\">\"abcabcbb\"</span>\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> \n解释<span class=\"token punctuation\">:</span> 因为无重复字符的最长子串是 <span class=\"token string\">\"abc\"</span>，所以其长度为 <span class=\"token number\">3</span>。\n<span class=\"token comment\">// 🌰🌰</span>\n输入<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bbbbb\"</span>\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n解释<span class=\"token punctuation\">:</span> 因为无重复字符的最长子串是 <span class=\"token string\">\"b\"</span>，所以其长度为 <span class=\"token number\">1</span>。\n<span class=\"token comment\">// 🌰🌰🌰</span>\n输入<span class=\"token punctuation\">:</span> <span class=\"token string\">\"pwwkew\"</span>\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n解释<span class=\"token punctuation\">:</span> 因为无重复字符的最长子串是 <span class=\"token string\">\"wke\"</span>，所以其长度为 <span class=\"token number\">3</span>。\n请注意，你的答案必须是 子串 的长度，<span class=\"token string\">\"pwke\"</span> 是一个子序列，不是子串。\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>本题来自leetcode第3题，欢迎留言并写出你的解法，我会在下周进行解答哦！</p>","headings":[{"value":"【每周算法】(双指针遍历篇)：长度最小的子数组","depth":2},{"value":"解答过程","depth":2},{"value":"维护数组 的滑块遍历","depth":3},{"value":"维护下标 的滑块遍历","depth":3},{"value":"下周题目","depth":2}],"frontmatter":{"title":"【每周算法】(双指针遍历篇)：长度最小的子数组","date":"July 06, 2020","description":"来自 一个歪卜 公众号文章，欢迎大家在文章下方评论区评论，也可以写出下周题目的解题思路哦～","tags":["javascript","每周算法"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2020_07_06_mzsf_4/","previous":{"fields":{"slug":"/post/2020_06_29_mzsf_3/"},"frontmatter":{"title":"【每周算法】(双指针遍历篇)：最接近的三数之和"}},"next":null}}}