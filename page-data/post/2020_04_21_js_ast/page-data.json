{"componentChunkName":"component---src-templates-post-js","path":"/post/2020_04_21_js_ast/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby OMG Blog","post":{"pageviews":true}}},"markdownRemark":{"id":"dc7e4d96-856a-528f-8f73-7895fcfe6825","excerpt":"想看代码的直接下载项目即可，里面注释写的还算详细。\n项目地址：https://github.com/betterTisen/oreojs…","html":"<blockquote>\n<p>想看代码的直接下载项目即可，里面注释写的还算详细。\n项目地址：<a href=\"https://github.com/betterTisen/oreojs\">https://github.com/betterTisen/oreojs</a></p>\n</blockquote>\n<h2 id=\"编译原理基础\">编译原理基础</h2>\n<p>编译原理是计算机学科中一个很伟大很重要的概念：即计算机识别自然语言的一个解析过程。单独拎出来说的话也很难概括其完整的知识点，而且笔者也只是知其皮毛而已（还需努力 💪）。。。但是通俗一点概括的话，就是为什么<strong>电脑可以将一串 js 字符串正确的让机器识别。从而得到你想要的效果</strong>。下面我们先来看一下它的大体解析步骤是怎样的。</p>\n<h3 id=\"解析步骤\">解析步骤</h3>\n<ol>\n<li>js 字符串通过词法分析和句法分析解析成一个抽象语法树（通过第三方库 acorn 实现）</li>\n<li>根据抽象语法树对不同 type 进行相应的解析（这里是本篇文章需要完成的）</li>\n</ol>\n<h3 id=\"javascript-语法树-type-的基本认知\">JavaScript 语法树 type 的基本认知</h3>\n<p>我推荐这一篇文章，大家可以快速预览一下，对 js ast 的常见 type 混个眼熟，不然一开始就撸代码可能会不知如何上手。。</p>\n<h2 id=\"准备工作\">准备工作</h2>\n<ul>\n<li>第三方库：acorn</li>\n<li>一个语法树生成的在线预览工具：<a href=\"https://astexplorer.net\">https://astexplorer.net</a></li>\n</ul>\n<p>建议各位可以先在上面的网址中随意的写一段简单的 js 代码，然后看一看生成的语法树结构（其实就是一个 json 对象）。<em>主要注意每一项的 type，start 和 end 可以忽略，我们用不到</em></p>\n<p>看一下实现后的效果。然后就开始撸代码吧</p>\n<p><img src=\"/fb1c07e47db09578a5829a4a5644e163/1.gif\" alt=\"result\"></p>\n<h2 id=\"节点遍历器（nodeiterator）\">节点遍历器（nodeIterator）</h2>\n<p>首先，通过语法树的结构可知，我们要处理的这个 json 是一个较深的树形结构。所以，我们需要一个遍历器，来一层一层的遍历节点。看下实现的代码，其中 scope 和 NodeHandler，我们会在后面的段落和大家详细介绍，现在你只需要知道，node 是语法树的 json，traverse 是根据 json 的 type 进行不同解析的方法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeIterator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> scope</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//node，就是树，随着节点的遍历，会有不同的子树被传入</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node\n    <span class=\"token comment\">//当前的作用域</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scope <span class=\"token operator\">=</span> scope\n    <span class=\"token comment\">//对各类节点的处理</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeHandler <span class=\"token operator\">=</span> NodeHandler\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 用于作用域处理，后面会说</span>\n  <span class=\"token function\">createScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scope<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//如果opt传入type，则使用传入的type，这里的意思是如果子树是一个新的作用域，则使用全新的作用域，否则，其作用域仍是当前作用域</span>\n    <span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>scope <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>scope <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scope\n    <span class=\"token keyword\">const</span> _evel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeHandler<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> nodeIterator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeIterator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_evel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unknown node type \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>node<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_evel</span><span class=\"token punctuation\">(</span>nodeIterator<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"作用域处理（scope）\">作用域处理（scope）</h2>\n<p>设想一下，如果上面的节点遍历器如果没有处理作用域会怎样？那不是每一个声明的变量都会处于全局之中吗，这显然是不对的。所以，我们需要一个类来对作用域进行管理。下面的代码就是一个完整的作用域处理类，不要看它这么长，其实很简单<br>\n看 <strong>constructor</strong>，这个类在初始化的时候，有三个属性，分别是自己的作用域，父级作用域，全局作用域。下面的 get 方法，即是获取变量的值，在当前作用域找，找不到就到父级找（注意，往父级查找是一个递归），最后找到全局，set 方法也一样</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentScope</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentScope <span class=\"token operator\">=</span> parentScope\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>globalDeclaration <span class=\"token operator\">=</span> globalMap\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每次都新建一个全新的作用域</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 获取变量值</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentScope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentScope<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>globalDeclaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>globalDeclaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is not defined</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 对已定义变量赋值</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentScope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentScope<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>globalDeclaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>globalDeclaration<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is not defined</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 抽象了三种变量定义方式</span>\n  <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> kind <span class=\"token operator\">=</span> <span class=\"token string\">\"var\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"var\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">varDeclare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"let\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">letDeclare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"const\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">constDeclare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">OreoJs: Invalid Variable Declaration Kind of \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>kind<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">varDeclare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 由于var类型有着变量提升的特性。在这里我直接使用let的方式来解析var，顾这里的var并没有做变量提升</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">letDeclare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">letDeclare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 不允许重复定义</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntaxError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Identifier </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has already been declared</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"let\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">constDeclare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 不允许重复定义</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntaxError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Identifier </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has already been declared</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"const\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码中有一个 SimpleValue，和 一个 globalMap。</p>\n<ul>\n<li>SimpleValue：定义变量值，主要用于处理常量</li>\n<li>globalMap：注入全局变量</li>\n</ul>\n<p>没啥好说的，直接贴代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// SimpleValue.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleValue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> kind <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kind <span class=\"token operator\">=</span> kind\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 禁止重新对const类型变量赋值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"const\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" is read-only</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// globalMap.js</span>\n<span class=\"token keyword\">import</span> SimpleValue <span class=\"token keyword\">from</span> <span class=\"token string\">\"../util/simpleValue\"</span>\n\n<span class=\"token keyword\">const</span> globalMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"window\"</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  console<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"各类节点处理（nodehandler）\">各类节点处理（nodeHandler）</h2>\n<p>当作用域的问题解决之后，接下来就是一个繁复的工作了：对不同 type 的 tree 进行解析。这里的 nodeHandler 就是我们上面说的对各类节点的处理</p>\n<p><strong>根节点处理器 Program</strong></p>\n<p>根节点是一个数组，所以只需要对数组进行循环解释即可</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">Program</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodeIterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> e <span class=\"token keyword\">of</span> nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nodeIterator<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>变量定义节点处理器 VariableDeclaration</strong></p>\n<p>这里基本就是根据定义变量的数量以及类型，循环进行赋值</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodeIterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> kind <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span>node\n  <span class=\"token keyword\">const</span> variableNodes <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>declarations\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> variableNode <span class=\"token keyword\">of</span> variableNodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> k <span class=\"token operator\">=</span> variableNode<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> variableNode<span class=\"token punctuation\">.</span>init <span class=\"token operator\">?</span> nodeIterator<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>variableNode<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\n    nodeIterator<span class=\"token punctuation\">.</span>scope<span class=\"token punctuation\">.</span><span class=\"token function\">declare</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>标识符节点处理器 Identifier</strong></p>\n<p>注意，这里的方法只用于读取值</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 标识符(用于读取值)</span>\n<span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodeIterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span>node\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> nodeIterator<span class=\"token punctuation\">.</span>scope<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>字符节点处理器 Literal</strong></p>\n<p>字面量直接返回就好</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//字面量</span>\n<span class=\"token function\">Literal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodeIterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>表达式调用节点处理器 CallExpression</strong></p>\n<p>函数调用，这里注意最后return的结果需要让this指向func</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 函数调用表达式，即表示了 func(1, 2) 这一类型的语句</span>\n<span class=\"token function\">CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodeIterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nodeIterator<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> value\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"MemberExpression\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>表达式节点处理器 MemberExpression</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 成员表达式节点，即表示引用对象成员的语句</span>\n<span class=\"token function\">MemberExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodeIterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nodeIterator<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>property\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其他的节点处理方式可以通过顶部的地址去看～这里知识列出了常见的节点处理方式，只要逐步完善这里的方法，让这个对象对各类节点都支持解析，就完成了一个基本的解释器</p>\n<h2 id=\"总结\">总结</h2>\n<p>总结一下，写这个解释器最复杂的就是处理作用域的问题，理解了这个解析器递归解释树的思路后，就是去写NodeIterator中不同type所对应的方法就行啦，看完这边文章后还不了解的话可以把github的代码拉下来，通过整个项目去看更容易理解一些，毕竟文章篇幅有限。</p>\n<h2 id=\"参考资料\">参考资料</h2>\n<p><a href=\"%E5%89%8D%E7%AB%AF%E4%B8%8E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%94%A8JS%E5%86%99%E4%B8%80%E4%B8%AAJS%E8%A7%A3%E9%87%8A%E5%99%A8\">前端与编译原理——用 JS 写一个 JS 解释器</a></p>\n<p><a href=\"https://github.com/jrainlau/canjs\">jrainlau/canjs</a></p>","headings":[{"value":"编译原理基础","depth":2},{"value":"解析步骤","depth":3},{"value":"JavaScript 语法树 type 的基本认知","depth":3},{"value":"准备工作","depth":2},{"value":"节点遍历器（nodeIterator）","depth":2},{"value":"作用域处理（scope）","depth":2},{"value":"各类节点处理（nodeHandler）","depth":2},{"value":"总结","depth":2},{"value":"参考资料","depth":2}],"frontmatter":{"title":"新瓶旧酒：如何用js写一个js解释器","date":"April 21, 2020","description":"编译原理是计算机学科中一个很伟大很重要的概念：即计算机识别自然语言的一个解析过程。单独拎出来说的话也很难概括其完整的知识点，而且笔者也只是知其皮毛而已（还需努力 💪）。。。但是通俗一点概括的话，就是为什么电脑可以将一串 js 字符串正确的让机器识别。从而得到你想要的效果。下面我们先来看一下它的大体解析步骤是怎样的。","tags":["javascript"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2020_04_21_js_ast/","previous":{"fields":{"slug":"/post/2020_03_25_js_event_loop/"},"frontmatter":{"title":"10分钟了解浏览器的Event Loop"}},"next":null}}}