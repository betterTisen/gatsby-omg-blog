{"componentChunkName":"component---src-templates-post-js","path":"/post/2019_11_14_nonebot_api/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby OMG Blog","post":{"pageviews":true}}},"markdownRemark":{"id":"49c45664-71db-5d14-be5b-d383f921a0c8","excerpt":"什么是 NoneBot NoneBot 的 github 地址 👈 NoneBot 是一个基于 CoolQ HTTP API 的 python 异步机器人框架。 示意图 酷 Q docker+CoolQ HTTP API 安装教程 windows 在官网 👈下载安装包即可完成安装\nmac OS/linux…","html":"<h2 id=\"什么是-nonebot\">什么是 NoneBot</h2>\n<p>NoneBot 的 <a href=\"https://github.com/richardchien/nonebot\">github 地址 👈</a></p>\n<p>NoneBot 是一个基于 CoolQ HTTP API 的 python 异步机器人框架。</p>\n<p><img src=\"https://raw.githubusercontent.com/richardchien/nonebot/master/diagram.png\" alt=\"示意图\"></p>\n<div class=\"note success no-icon\">\n  <h3 style=\"margin-top:0\">官方解释：</h3>\n  <p>提供极其简洁易懂的 API，使你可以毫无压力地开始验证你的绝佳创意，只需编写最少量的代码，即可实现丰富的功能。</p>\n  <p>精心设计的消息处理流程及强大的 API 使得你可以很方便地将最简单的原型变为具有大量实用功能的完整聊天机器人，并持续保证扩展性。</p>\n  <p>基于时下流行的 asyncio 模块，利用 WebSocket 进行通信，以获得极高的性能；同时，支持使用多个机器人账号来负载均衡用户消息，减少业务宕机的可能。</p>\n</div>\n<p><strong>酷 Q docker+CoolQ HTTP API 安装教程</strong></p>\n<p>windows 在<a href=\"https://cqp.cc/t/23253\">官网 👈</a>下载安装包即可完成安装\n<a href=\"https://www.ihewro.com/archives/979/\">mac OS/linux👈</a>的安装教程点这里</p>\n<p><strong>文档</strong></p>\n<p><a href=\"https://cqhttp.cc/\">CoolQ HTTP API 4.12 的文档 👈</a></p>\n<p><a href=\"https://nonebot.cqp.moe/\">NoneBot 文档 👈</a></p>\n<h2 id=\"nonebot-的部署\">NoneBot 的部署</h2>\n<p><strong>1. 安装 docker 镜像</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#1. 安装docker</span>\nyum <span class=\"token function\">install</span> docker\n\n<span class=\"token comment\">#2. 安装酷Q+http插件集成镜像</span>\ndocker pull richardchien/cqhttp:latest\n\n<span class=\"token comment\">#3. 在docker中启动coolq</span>\n<span class=\"token comment\">#  ~/coolq 为你的文件镜像容器所在的位置</span>\n<span class=\"token comment\"># 4399为你登陆VNC后台的端口，地址即为 &lt;云主机ip>：4399</span>\n<span class=\"token comment\"># 12345678为你的VNC后台登陆密码</span>\ndocker run --name<span class=\"token operator\">=</span>coolq --rm -p <span class=\"token number\">4399</span>:9000 -v ~/coolq:/home/user/coolq -e <span class=\"token assign-left variable\">VNC_PASSWD</span><span class=\"token operator\">=</span><span class=\"token number\">12345678</span> -e <span class=\"token assign-left variable\">COOLQ_ACCOUNT</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> coolq/wine-coolq\n\n<span class=\"token comment\"># 上面的方式为前台启动，如需后台启动，只需要将--rm换成-d即可。</span>\n<span class=\"token comment\"># 然后输入</span>\ndocker start coolq\n<span class=\"token comment\"># 退出后台服务</span>\ndocker stop coolq</code></pre></div>\n<p><strong>2. 下载及配置 CoolQ Http API 包</strong></p>\n<ul>\n<li>点击<a href=\"https://github.com/richardchien/coolq-http-api/releases\">这里 👈</a>下载 cpk 文件</li>\n<li>然后将其放入 ~/coolq/app 中</li>\n<li>在浏览器中输入 &#x3C;云主机 ip>：4399 启动后开启 coolq http api 插件</li>\n<li>找到 ~/coolq/data/app/io.github.richardchien.coolqhttpapi/config/ 中的 json 文件，修改里面的三项配置</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 端口可以改，但是 务必和后面nonebot启动的端口保持一致</span>\n<span class=\"token comment\">// 这个操作就是让「CoolQ HTTP API 插件」把接收信息和发送的信息借给noneboot 模块来接管。</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ws_reverse_api_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ws://&lt;云主机ip>:9999/ws/api/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ws_reverse_event_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ws://&lt;云主机ip>:9999/ws/event/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"use_ws_reverse\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>3. 下载 NoneBot</strong></p>\n<ul>\n<li>建议先在本机熟悉 nonebot 相关知识并成功启动服务。点击<a href=\"https://nonebot.cqp.moe/guide/\">这里 👈</a>查看文档</li>\n<li>这是我的 requirements.txt 文件，环境为 python3.7。各位可自行拷贝。然后通过 pip install -r requirements.txt 进行安装</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">aiocache==0.11.1\naiocqhttp==0.6.8\naiofiles==0.4.0\naiohttp==3.6.2\nAPScheduler==3.6.3\nasync-timeout==3.0.1\nattrs==19.3.0\nblinker==1.4\ncertifi==2019.9.11\nchardet==3.0.4\nClick==7.0\nh11==0.9.0\nh2==3.1.1\nhpack==3.0.0\nHypercorn==0.5.4\nhyperframe==5.2.0\nidna==2.8\nitsdangerous==1.1.0\nJinja2==2.10.3\nMarkupSafe==1.1.1\nmsgpack==0.6.2\nmultidict==4.5.2\nnonebot==1.3.1\npytoml==0.1.21\npytz==2019.3\nQuart==0.6.15\nsix==1.13.0\nsortedcontainers==2.1.0\ntyping-extensions==3.7.4.1\ntzlocal==2.0.0\nujson==1.35\nwsproto==0.15.0\nyarl==1.3.0</code></pre></div>\n<p><strong>4. 编写 py 文件</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># bot.py文件</span>\n<span class=\"token keyword\">import</span> nonebot\n<span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    nonebot<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nonebot<span class=\"token punctuation\">.</span>load_plugins<span class=\"token punctuation\">(</span>\n        path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'plugins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'plugins'</span>\n    <span class=\"token punctuation\">)</span>\n    nonebot<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>5. 服务部署</strong></p>\n<p><strong>前台部署</strong>：通过命令 <code class=\"language-text\">python bot.py</code> 即可成功启动前台服务（断开 ssh 后则会失效）</p>\n<p><strong>后台部署</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用nohup命令今可进行后台部署，断开ssh后仍然有效</span>\n<span class=\"token comment\"># 此时在bot.py的同级文件下，会生成生成一个nohup.out文件记录日志</span>\n<span class=\"token function\">nohup</span> python bot.py <span class=\"token operator\">&amp;</span>\n<span class=\"token comment\"># 查看启动的服务，并找到对应的pid</span>\n<span class=\"token function\">ps</span> -ax <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> python\n<span class=\"token comment\"># 停止服务</span>\n<span class=\"token function\">kill</span> -9 <span class=\"token operator\">&lt;</span>进程号PID<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"nonebot-常用-api\">NoneBot 常用 Api</h2>\n<p>因为最近的 bot 开发选用了此框架。故在此进行了实用 api 的记录和整理，为以后进行开发做一个记录，同时也方便其他刚接触此框架的小伙伴快速上手。</p>\n<p><strong>on_command (命令配置):</strong></p>\n<p>将函数装饰为命令函数</p>\n<p><strong>args_parser:</strong></p>\n<p>将函数装饰为命令层面的参数解析器，将在命令实际处理函数之前被运行。接受的参数为<code class=\"language-text\">CommandSession</code></p>\n<p><strong>CommandSession 常用参数:</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">state</code>: 属性本身只读，但属性中的内容可读写。</p>\n<ul>\n<li><strong>读</strong>: session.state.get(‘xxx’)</li>\n<li><strong>写</strong>: session.state[‘xxx’]=‘xxxx’</li>\n</ul>\n</li>\n<li><code class=\"language-text\">is_first_run</code>: 是否是第一次运行</li>\n<li><code class=\"language-text\">current_arg_text</code>: 属性的纯文本部分（不包含 CQ 码），各部分使用空格连接。</li>\n</ul>\n<p><strong>命令权限</strong></p>\n<ul>\n<li>PRIVATE_FRIEND(0x0001): 好友私聊</li>\n<li>PRIVATE_GROUP(0x0002): 群临时私聊</li>\n<li>PRIVATE_DISCUSS(0x0004): 讨论组临时私聊</li>\n<li>PRIVATE_OTHER(0x0008): 其它私聊</li>\n<li>PRIVATE(0x000F): 任何私聊</li>\n<li>DISCUSS(0x00F0): 讨论组</li>\n<li>GROUP_MEMBER(0x0100): 群成员</li>\n<li>GROUP_ADMIN(0x0200): 群管理员</li>\n<li>GROUP_OWNER(0x0400): 群主</li>\n<li>GROUP(0x0F00): 任何群成员</li>\n<li>SUPERUSER(0xF000): 超级用户</li>\n<li>EVERYBODY(0xFFFF): 任何人</li>\n<li>IS_NOBODY(0x0000): 禁止任何人</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token keyword\">from</span> nonebot <span class=\"token keyword\">import</span> permission\n  @nonebot<span class=\"token punctuation\">.</span>on_command<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> permission<span class=\"token operator\">=</span>permission<span class=\"token punctuation\">.</span>PRIVATE <span class=\"token operator\">|</span> permission<span class=\"token punctuation\">.</span>GROUP_ADMIN<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p><strong>on_message（收到消息）:</strong></p>\n<p>将函数装饰为消息事件的处理函数</p>\n<ul>\n<li><code class=\"language-text\">private</code>: 私聊消息</li>\n<li><code class=\"language-text\">group</code>: 群消息</li>\n</ul>\n<p><strong>on_notice（群、讨论组变动等通知类事件）:</strong></p>\n<p>将函数装饰为通知事件的处理函数</p>\n<ul>\n<li><code class=\"language-text\">group_upload</code>：群文件上传</li>\n<li><code class=\"language-text\">group_decrease</code>：群成员减少</li>\n<li><code class=\"language-text\">group_increase</code>：群成员增加</li>\n<li><code class=\"language-text\">friend_add</code>：好友添加（官方文档说是好友添加的相应事件，可是本人测试发现无效）</li>\n</ul>\n<p><strong>on_request（加好友请求、加群请求／邀请）:</strong></p>\n<p>将函数装饰为请求事件的处理函数</p>\n<ul>\n<li><code class=\"language-text\">friend</code>:有人发送添加好友请求时触发</li>\n<li><code class=\"language-text\">group</code>:有人发送加入群请求时触发</li>\n</ul>\n<p><strong>CQ 码（表情）</strong></p>\n<p>qq 自带表情 [CQ:face,id=表情 id]：\n<a href=\"https://cqp.cc/t/36910\">对照表 👈</a></p>\n<p>emoji 表情 [CQ:emoji,id=表情 id]：\n<a href=\"https://cqp.cc/t/15827\">对照表 👈</a></p>","headings":[{"value":"什么是 NoneBot","depth":2},{"value":"NoneBot 的部署","depth":2},{"value":"NoneBot 常用 Api","depth":2}],"frontmatter":{"title":"NoneBot 开发记录","date":"November 14, 2019","description":null,"tags":["python","coolq","nonebot"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2019_11_14_nonebot_api/","previous":{"fields":{"slug":"/post/2019_10_26_markdown_study/"},"frontmatter":{"title":"markdown在omg中的渲染效果展示"}},"next":{"fields":{"slug":"/post/2019_12_16_css_grid/"},"frontmatter":{"title":"浅谈 CSS Grid 布局"}}}}}