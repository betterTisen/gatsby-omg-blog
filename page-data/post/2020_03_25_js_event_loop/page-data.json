{"componentChunkName":"component---src-templates-post-js","path":"/post/2020_03_25_js_event_loop/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby OMG Blog","post":{"pageviews":true}}},"markdownRemark":{"id":"8b0c01c6-8ac7-5f8e-aa15-b14b4b3cd2f8","excerpt":"什么是 Event Loop 因为一定的历史原因，JavaScript 是一种运行在浏览器的语言，而 run in Browser 最重要的就是减少语言的运行成本，因为 js 的设计起初是为了操作浏览器 dom，如若设计成多线程必然会引起文件操作的资源竞争\nEvent Loop…","html":"<h2 id=\"什么是-event-loop\">什么是 Event Loop</h2>\n<p>因为一定的历史原因，JavaScript 是一种运行在浏览器的语言，而 run in Browser 最重要的就是减少语言的运行成本，因为 js 的设计起初是为了操作浏览器 dom，如若设计成多线程必然会引起文件操作的资源竞争\n<strong>Event Loop</strong> 是一种解决浏览器单线程阻塞的解决方案，也叫做异步处理</p>\n<h2 id=\"了解-event-loop-的前置知识\">了解 Event Loop 的前置知识</h2>\n<h3 id=\"栈-与-队列\">栈 与 队列</h3>\n<p>因为只是内容偏基础，这里不做过多介绍，如果不了解的话你可以看下<a href=\"https://www.cnblogs.com/sang-bit/p/11757553.html\">这篇文章</a></p>\n<h3 id=\"宏任务（macrotask）与-微任务（microtask）\">宏任务（MacroTask）与 微任务（MicroTask）</h3>\n<p>由于 js 是单线程语言，所以通过异步的方式解决阻塞问题。故其除了有主执行栈外，还有一个宏任务队列与微任务队列。</p>\n<ol>\n<li>当<strong>主执行栈</strong>代码执行完毕后，浏览器会检查<strong>微任务队列</strong>中的内容，当<strong>微任务队列</strong>存在任务片段时，插入主栈，直到内容为空，</li>\n<li>此时会检查<strong>宏任务队列</strong>，当<strong>宏任务队列</strong>存在任务片段时，插入主栈，</li>\n<li>然后再检查<strong>微任务队列</strong>，以此反复循环。</li>\n</ol>\n<p>以下是浏览器分配任务原则</p>\n<ul>\n<li><strong>宏任务</strong>：包括 js 基本代码、setTimeout、setInterval</li>\n<li><strong>微任务</strong>：Promise</li>\n</ul>\n<h2 id=\"浏览器中的-event-loop\">浏览器中的 Event Loop</h2>\n<p>通过一个简单的 🌰，就能很直观的看出浏览器的 Event Loop 策略</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setTimeout1\"</span><span class=\"token punctuation\">)</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setTimeout2\"</span><span class=\"token punctuation\">)</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promise2\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// setTimeout1，promise1，setTimeout2，promise2，</span></code></pre></div>\n<p>这是图例\n<img src=\"/d1ca0d6b13501044a5f74c99becbcd3d/1.gif\" alt=\"图片\"></p>\n<p>如果你想深入了解 浏览器 或者 nodejs 的事件轮询机制，可以阅读<a href=\"https://juejin.im/post/5c3d8956e51d4511dc72c200?utm_source=gold_browser_extension#heading-7\">这篇文章</a></p>","headings":[{"value":"什么是 Event Loop","depth":2},{"value":"了解 Event Loop 的前置知识","depth":2},{"value":"栈 与 队列","depth":3},{"value":"宏任务（MacroTask）与 微任务（MicroTask）","depth":3},{"value":"浏览器中的 Event Loop","depth":2}],"frontmatter":{"title":"10分钟了解浏览器的Event Loop","date":"March 25, 2020","description":null,"tags":["web","javascript","node"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2020_03_25_js_event_loop/","previous":{"fields":{"slug":"/post/2020_01_20_omg_blog_doc/"},"frontmatter":{"title":"OMG！简约至上的博客主题"}},"next":{"fields":{"slug":"/post/2020_04_21_js_ast/"},"frontmatter":{"title":"新瓶旧酒：如何用js写一个js解释器"}}}}}